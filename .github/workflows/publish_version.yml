name: Publish Version

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write      # crear release
  pages: write         # publicar en GitHub Pages
  id-token: write      # necesario para deploy de Pages

concurrency:
  group: publish-version-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-test-coverage:
    name: Build, Test and Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore

      - name: Test with coverage (Cobertura)
        run: |
          dotnet test tests/EmployeeApp.Tests/EmployeeApp.Tests.csproj -c Release \
            --no-build \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Find coverage report path
        id: coverage
        shell: bash
        run: |
          file=$(find tests/EmployeeApp.Tests/TestResults -name 'coverage.cobertura.xml' | head -n 1)
          echo "coverage_file=$file" >> $GITHUB_OUTPUT

      - name: Generate HTML coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.9
        with:
          reports: ${{ steps.coverage.outputs.coverage_file }}
          targetdir: coverage-report
          reporttypes: Html;TextSummary

      - name: Print coverage summary
        run: |
          cat coverage-report/Summary.txt || true

      - name: Upload Pages artifact (coverage site)
        uses: actions/upload-pages-artifact@v3
        with:
          path: coverage-report

  deploy-pages:
    name: Deploy Coverage to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-test-coverage
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-test-coverage
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute tag/version
        id: version
        shell: bash
        run: |
          # Genera una versiÃ³n del tipo vYYYYMMDD.RUN
          tag=v$(date -u +%Y%m%d).${GITHUB_RUN_NUMBER}
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.tag }}
          draft: false
          prerelease: false


